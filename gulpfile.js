const browserSync = require('browser-sync').create('browserSync');
const _merge = require('lodash.merge');
const { series, parallel, watch } = require('gulp');
const path = require('path');

const defaultConfig = {
    src: {
        dir: 'src/',
        fonts: 'fonts/**/*.{woff,woff2,ttf,otf,svg}',
        images: 'img/**/*.{png,jpg,jpeg,gif,svg,ico,json,xml}',
        scripts: 'js/**/*.js',
        styles: 'scss/**/*.scss'
    },
    dist: {
        dir: 'dist/',
        fonts: 'fonts',
        images: 'img',
        scripts: 'js',
        styles: 'css'
    },
    options: {
        autoprefixer: {},
        browsersync: {
            open: false,
            notify: false,
            proxy: ''
        },
        csscomb: path.resolve(__dirname, '.csscomb.json'),
        cssnano: {
            preset: 'default'
        },
        rucksack: {
            responsiveType: true,
            shorthandPosition: false,
            quantityQueries: false,
            inputPseudo: false,
            clearFix: false,
            fontPath: false,
            hexRGBA: false,
            easings: false,
            fallbacks: false,
            autoprefixer: false,
            reporter: false
        },
        scss: {
            includePaths: ['node_modules']
        },
        webpack: {
            // Generated by scripts task
        }
    }
};

function prettyLog(json) {
    console.log(JSON.stringify(json, null, 4));
}

module.exports = projectConfig => {
    const config = _merge({}, defaultConfig, projectConfig);

    // Build list of resolved paths to pass to tasks
    config.paths = {};

    ['fonts', 'images', 'scripts', 'styles'].forEach(task => {
        config.paths[task] = {
            src: path.resolve(config.src.dir, config.src[task]),
            dist: path.resolve(config.dist.dir, config.dist[task])
        }
    });

    // prettyLog(config);

    const cleanTask = require('./tasks/clean.js')(config).clean;
    const fontsTask = require('./tasks/fonts.js')(config).fonts;
    const imageTasks = require('./tasks/images.js')(config);
    const scriptTasks = require('./tasks/scripts.js')(config);
    const styleTasks = require('./tasks/styles.js')(config);

    const browserSyncReloadTask = cb => {
        browserSync.reload();
        cb();
    };

    const watchTask = cb => {
        watch(config.paths.fonts.src, fontsTask);
        watch(config.paths.images.src, imageTasks.dev);
        watch(config.paths.scripts.src, series(scriptTasks.dev, browserSyncReloadTask));
        watch(config.paths.styles.src, series(styleTasks.csscomb, styleTasks.dev));
        watch(config.src.views, browserSyncReloadTask);
    }

    const serveTask = cb => {
        browserSync.init(config.options.browsersync);
    }

    const devBuildTask = series(
        cleanTask,
        parallel(
            fontsTask,
            imageTasks.dev,
            series(
                styleTasks.csscomb,
                styleTasks.dev
            ),
            scriptTasks.dev
        )
    );

    const prodBuildTask = series(
        cleanTask,
        parallel(
            fontsTask,
            imageTasks.prod,
            series(
                styleTasks.csscomb,
                styleTasks.prod
            ),
            scriptTasks.prod
        )
    );

    return {
        clean: cleanTask,
        fonts: fontsTask,
        images: imageTasks.dev,
        scripts: scriptTasks.dev,
        styles: styleTasks.dev,
        csscomb: styleTasks.csscomb,
        watch: watchTask,
        serve: serveTask,
        dev: devBuildTask,
        build: prodBuildTask,
        default: parallel(devBuildTask, serveTask, watchTask),
    }
};

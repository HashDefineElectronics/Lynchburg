const browserSync = require('browser-sync').create('browserSync');
const _merge = require('lodash.merge');
const { series, parallel, watch } = require('gulp');
const path = require('path');
const yargs = require('yargs');

const timer = require('./lib/timer.js');

const defaultConfig = {
    src: {
        dir: 'src/',
        fonts: 'fonts/**/*.{woff,woff2,ttf,otf,svg}',
        images: 'img/**/*.{png,jpg,jpeg,gif,svg,ico,json,xml}',
        js: 'js/**/*.js',
        sass: 'scss/**/*.scss',
        views: ''
    },
    dist: {
        dir: 'dist/',
        fonts: 'fonts',
        images: 'img',
        js: 'js',
        css: 'css'
    },
    options: {
        autoprefixer: {},
        browsersync: {
            open: false,
            notify: false,
            proxy: ''
        },
        csscomb: path.resolve(__dirname, '.csscomb.json'),
        cssnano: {
            preset: 'default'
        },
        rucksack: {
            responsiveType: true,
            shorthandPosition: false,
            quantityQueries: false,
            inputPseudo: false,
            clearFix: false,
            fontPath: false,
            hexRGBA: false,
            easings: false,
            fallbacks: false,
            autoprefixer: false,
            reporter: false
        },
        sass: {
            includePaths: ['node_modules']
        },
        webpack: {
            // Generated by scripts task
        }
    }
};

function prettyLog(json) {
    console.log(JSON.stringify(json, null, 4));
}

module.exports = projectConfig => {
    const config = _merge({}, defaultConfig, projectConfig);

    config.isProduction = !!yargs.argv.production;

    // Build list of resolved paths to pass to tasks
    config.paths = {
        src: {},
        dist: {}
    };

    ['src', 'dist'].forEach(group => {
        Object.keys(config[group]).forEach(dirName => {
            if(dirName == 'dir' || dirName == 'views') {
                return;
            }
            config.paths[group][dirName] = path.resolve(config[group].dir, config[group][dirName])
        });
    });

    // prettyLog(config);

    const cleanTask = require('./tasks/clean.js')(config);
    const cssCombTask = require('./tasks/csscomb.js')(config);
    const fontsTask = require('./tasks/fonts.js')(config);
    const imagesTask = require('./tasks/images.js')(config);
    const sassTask = require('./tasks/sass.js')(config);
    const webpackTask = require('./tasks/webpack.js')(config);

    cleanTask.displayName = 'clean';
    cssCombTask.displayName = 'csscomb';
    fontsTask.displayName = 'fonts';
    imagesTask.displayName = 'images';
    sassTask.displayName = 'sass';
    webpackTask.displayName = 'webpack';

    const reloadBrowserSync = cb => {
        browserSync.reload();
        cb();
    };

    const watchTask = cb => {
        // Watchers are passed timed tasks to show output when watched task fires
        watch(config.paths.src.fonts, timer(fontsTask));
        watch(config.paths.src.images, timer(imagesTask));
        watch(config.paths.src.js, series(timer(webpackTask), reloadBrowserSync));
        // Sass watcher is paused during CSScomb and Sass to avoid infinite loop
        const sassWatcher = watch(config.paths.src.sass, series(
            cb => {
                sassWatcher.unwatch(config.paths.src.sass);
                cb();
            },
            timer(cssCombTask),
            timer(sassTask),
            cb => {
                sassWatcher.add(config.paths.src.sass);
                cb();
            }
        ));
        watch(config.src.views, reloadBrowserSync);
    }

    const serveTask = cb => {
        browserSync.init(config.options.browsersync);
    }

    // Gulp doesn't show output for tasks in series/parallel when exported via Lynchburg, so force output with timer
    const buildTask = series(
        timer(cleanTask),
        parallel(
            timer(fontsTask),
            timer(imagesTask),
            series(
                timer(cssCombTask),
                timer(sassTask)
            ),
            timer(webpackTask)
        )
    );
    buildTask.displayName = 'build';

    return {
        clean: cleanTask,
        csscomb: cssCombTask,
        fonts: fontsTask,
        images: imagesTask,
        sass: sassTask,
        webpack: webpackTask,
        watch: watchTask,
        serve: serveTask,
        build: buildTask,
        default: series(timer(buildTask), parallel(serveTask, watchTask))
    }
};

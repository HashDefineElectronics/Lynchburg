const browserSync = require('browser-sync').create('browserSync');
const _merge = require('lodash.merge');
const { series, parallel, watch } = require('gulp');
const path = require('path');
const yargs = require('yargs');

const generateTaskInfo = require('./lib/documentation.js');
const timer = require('./lib/timer.js');

const defaultConfig = {
    src: {
        dir: 'src/',
        fonts: 'fonts/**/*.{woff,woff2,ttf,otf,svg}',
        images: 'img/**/*.{png,jpg,jpeg,gif,svg,ico,json,xml}',
        js: 'js/**/*.js',
        sass: 'scss/**/*.scss',
        views: ''
    },
    dist: {
        dir: 'dist/',
        fonts: 'fonts',
        images: 'img',
        js: 'js',
        css: 'css'
    },
    options: {
        autoprefixer: {},
        browsersync: {
            open: false,
            notify: false,
            proxy: ''
        },
        csscomb: path.resolve(__dirname, '.csscomb.json'),
        cssnano: {
            preset: 'default'
        },
        rucksack: {
            responsiveType: true,
            shorthandPosition: false,
            quantityQueries: false,
            inputPseudo: false,
            clearFix: false,
            fontPath: false,
            hexRGBA: false,
            easings: false,
            fallbacks: false,
            autoprefixer: false,
            reporter: false
        },
        sass: {
            includePaths: ['node_modules']
        },
        webpack: {
            // Generated by scripts task
        }
    }
};

function prettyLog(json) {
    console.log(JSON.stringify(json, null, 4));
}

function lynchburg(projectConfig) {
    const config = _merge({}, defaultConfig, projectConfig);

    config.isProduction = !!yargs.argv.production;

    // Build list of resolved paths to pass to tasks
    config.paths = {
        src: {},
        dist: {}
    };

    ['src', 'dist'].forEach(group => {
        Object.keys(config[group]).forEach(dirName => {
            if(dirName == 'dir' || dirName == 'views') {
                return;
            }
            config.paths[group][dirName] = path.resolve(config[group].dir, config[group][dirName])
        });
    });

    // prettyLog(config);

    const tasks = {};

    tasks.clean = require('./tasks/clean.js')(config);
    tasks.csscomb = require('./tasks/csscomb.js')(config);
    tasks.fonts = require('./tasks/fonts.js')(config);
    tasks.images = require('./tasks/images.js')(config);
    tasks.sass = require('./tasks/sass.js')(config);
    tasks.webpack = require('./tasks/webpack.js')(config);

    const reloadBrowserSync = cb => {
        browserSync.reload();
        cb();
    };

    tasks.watch = cb => {
        // Watchers are passed timed tasks to show output when watched task fires
        watch(config.paths.src.fonts, timer(tasks.fonts));
        watch(config.paths.src.images, timer(tasks.images));
        watch(config.paths.src.js, series(timer(tasks.webpack), reloadBrowserSync));
        // Sass watcher is paused during CSScomb and Sass to avoid infinite loop
        const sassWatcher = watch(config.paths.src.sass, series(
            cb => {
                sassWatcher.unwatch(config.paths.src.sass);
                cb();
            },
            timer(tasks.csscomb),
            timer(tasks.sass),
            cb => {
                sassWatcher.add(config.paths.src.sass);
                cb();
            }
        ));
        watch(config.src.views, reloadBrowserSync);
    }

    tasks.serve = cb => {
        browserSync.init(config.options.browsersync);
    }

    // Gulp doesn't show output for tasks in series/parallel when exported via Lynchburg, so force output with timer
    tasks.build = series(
        timer(tasks.clean),
        parallel(
            timer(tasks.fonts),
            timer(tasks.images),
            series(
                timer(tasks.csscomb),
                timer(tasks.sass)
            ),
            timer(tasks.webpack)
        )
    );

    tasks.default = series(timer(tasks.build), parallel(timer(tasks.serve), timer(tasks.watch)));

    // Generate name and description for each task for `gulp --tasks`
    Object.keys(tasks).forEach(taskName => {
        generateTaskInfo(tasks[taskName], taskName);
    });

    return tasks;
};

module.exports = lynchburg;
